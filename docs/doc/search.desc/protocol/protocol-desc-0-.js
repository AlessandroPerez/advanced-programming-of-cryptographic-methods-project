searchState.loadedDescShard("protocol", 0, "This module defines the error types used throughout the …\nThis module implements the Double Ratchet algorithm.\nThis module implements the X3DH (Extended Triple …\nByte size of an AES-256 nonce.\nByte size of an AES-256 key.\nByte size of a challenge.\nByte size of a Curve25519 public key.\nByte size of a Curve25519 private key.\nMaximum number of allowed skips.\nByte size of a SHA-256 hash.\nByte size of a signature.\nGeneral AES-GCM encryption or decryption error.\nError indicating an invalid length for AES-GCM encryption …\nError occurring during Base64 decoding of encoded data.\nError indicating a failure in data type conversion.\nError occurring during message decryption, wrapping an …\nError indicating an invalid key material length during …\nError indicating an invalid key material length during …\nError indicating that the challenge in the X3DH protocol …\nError indicating an invalid message header length.\nError indicating that an <code>crate::utils::InitialMessage</code> is …\nError indicating a general key validation failure.\nError indicating that a <code>crate::utils::PreKeyBundle</code> is …\nError indicating an invalid or corrupted …\nError indicating an invalid or corrupted …\nError occurring during signature verification with Ed25519.\nError indicating that the maximum number of skipped …\nRepresents errors that can occur during the Double Ratchet …\nRepresents errors that can occur during the X3DH key …\nFormats the error message for display.\nFormats the error message for display.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Header</code> represents a Double Ratchet header containing key …\nThe total byte length of the serialized <code>Header</code>, which …\nA <code>Ratchet</code> represents the Double Ratchet state used for …\nA <code>RatchetKeyPair</code> consists of a public and private key, …\nDecrypts a received message, performing ratchet step if …\nPerforms a DH ratchet step: updates keys and state for a …\nThe most recently received public key from the remote …\nThe local Diffie-Hellman key pair used for sending …\nThe sender’s current Diffie-Hellman public key. For more …\nPerforms a Diffie-Hellman key exchange with the provided …\nEncrypts a message using the current sending chain state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerives a new chain key and message key from the current …\nDerives a new root key and chain key from the current root …\nInitializes the ratchet state for Alice (the initiator).\nInitializes the ratchet state for Bob (the receiver).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map of skipped message keys indexed by (sender public …\nThe number of messages received in the current receiving …\nThe number of messages sent in the current sending chain.\nGenerates a new <code>RatchetKeyPair</code> with a freshly created …\nConstructs a new <code>Header</code> with the given public key and …\nConstructs a <code>RatchetKeyPair</code> from an existing private and …\nThe current message number in the sending chain.\nThe previous chain length, indicating how many messages …\nThe number of messages sent in the previous sending chain.\nThe private key component of the key pair. For more …\nThe public key component of the key pair. For more …\nThe current chain key used for deriving message keys in …\nThe current root key shared between both parties. For more …\nThe current chain key used for deriving message keys in …\nSkips message keys up to a given message number and stores …\nConverts each element of the <code>Header</code> into bytes.\nConverts a vector into a <code>Header</code>.\nAttempts to decrypt the message using any skipped keys. …\nAdditional data exchanged during the X3DH handshake, …\nThe total byte size of the pre-key bundle, which includes …\nThe base byte size without an optional one-time prekey …\nA fixed-length random challenge used for proving …\nA 256-bit AES key used for decrypting messages in the X3DH …\nA 256-bit AES key used for encrypting messages in the X3DH …\nA message sent by the initiator in the X3DH key exchange …\nA <code>PreKeyBundle</code> contains the public keys and signature …\nA Curve25519 private key used in the X3DH key exchange for …\nA Curve25519 public key used in the X3DH protocol to …\nTotal size in bytes of the associated data, which is the …\nThe total byte size of the message when the one-time …\nA <code>SessionKeys</code> represents a set of cryptographic keys and …\nA SHA-256 hash used for identifying and verifying keys or …\nA 256-bit secret shared between two parties after …\nA digital signature used to authenticate public keys …\nA key pair used as a signed pre-key in the X3DH protocol.\nAn Ed25519 signing key used to create digital signatures …\nA public key used to verify signatures in the X3DH …\nOptional associated data used for authentication and …\nAdds a one-time pre-key\nReturns a shared reference to the current <code>SharedSecret</code>.\nReturns a shared reference to this <code>VerifyingKey</code>.\nReturns a shared reference to the current <code>PrivateKey</code>.\nReturns a shared reference to the current <code>PublicKey</code>.\nReturns a shared reference to the current <code>Signature</code>.\nReturns a shared reference to the current <code>EncryptionKey</code>.\nReturns a shared reference to the current <code>DecryptionKey</code>.\nAssociated identity key data for both parties.\nA challenge generated by the initiator for authentication.\nDecrypts AES-GCM encrypted <code>data</code> using the provided <code>nonce</code> …\nDecrypts a <code>Challenge</code> value using a fixed nonce. This is …\nComputes a Diffie-Hellman shared secret using the current …\nPerforms a Diffie-Hellman key exchange with a given public …\nThe decryption key used for incoming messages. For more …\nThe encryption key used for outgoing messages. For more …\nEncrypts the given <code>data</code> using AES-256-GCM with the given …\nEncrypts a short <code>data</code> slice deterministically to form a …\nThe initiator’s ephemeral public key.\nCompares two <code>PublicKey</code> instances for equality.\nCompares two <code>Sha256Hash</code> values for equality based on their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerives a <code>SharedSecret</code> from a <code>DecryptionKey</code> and an …\nDerives a <code>SharedSecret</code> from an <code>EncryptionKey</code> and a …\nDerives a <code>SharedSecret</code> from a <code>[u8; </code>AES256_SECRET_LENGTH<code>]</code>.\nDerives a <code>VerifyingKey</code> from a <code>PublicKey</code>.\nReturns the argument unchanged.\nDerives a <code>VerifyingKey</code> from a <code>SigningKey</code>.\nDerives a <code>VerifyingKey</code> from a shared reference to a …\nDerives a <code>VerifyingKey</code> from a shared reference to a …\nDerives a <code>SigningKey</code> from a <code>PrivateKey</code>.\nDerives a <code>SigningKey</code> from a shared reference to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerives a <code>PrivateKey</code> from a shared reference to a …\nDerives a <code>PrivateKey</code> from a <code>SigningKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerives a <code>PublicKey</code> from a shared reference to a <code>[u8; </code>…\nDerives a <code>PublicKey</code> from a shared reference to a <code>SigningKey</code>…\nDerives a <code>PublicKey</code> from a <code>PrivateKey</code>.\nDerives a <code>PublicKey</code> from a shared reference to a <code>PrivateKey</code>…\nDerives a <code>PublicKey</code> from a <code>VerifyingKey</code>.\nDerives a <code>PublicKey</code> from a <code>SigningKey</code>.\nDerives a <code>PublicKey</code> from a shared reference to a …\nReturns the argument unchanged.\nDerives a <code>Signature</code> from a <code>[u8; </code>SIGNATURE_LENGTH<code>]</code>.\nReturns the argument unchanged.\nDerives a <code>Sha256Hash</code> from a shared reference to a <code>[u8; </code>…\nReturns the argument unchanged.\nDerives a <code>Challenge</code> from a shared reference to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerives an <code>EncryptionKey</code> from a <code>SharedSecret</code>.\nReturns the argument unchanged.\nDerives an <code>DecryptionKey</code> from a <code>SharedSecret</code>.\nReturns the argument unchanged.\nConverts a base64-encoded string into a <code>PrivateKey</code>.\nConverts a base64-encoded string into a <code>PublicKey</code>.\nReturns the <code>AssociatedData</code> for the current session, if …\nReturns a clone of the <code>AssociatedData</code> from the current …\nReturns the <code>DecryptionKey</code> for the current session, if …\nReturns the <code>EncryptionKey</code> for the current session, if …\nReturns the SHA-256 hash of the current <code>PublicKey</code>.\nFeeds the internal byte array into the given hasher. This …\nThe initiator’s identity public key.\nThe recipient’s identity public key. For more …\nThe identity public key of the initiator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new pre-key bundle.\nCreates a new empty <code>SessionKeys</code> object\nGenerates a new random <code>SigningKey</code> using a secure random …\nGenerates a new <code>SignedPreKey</code> key pair. This function …\nGenerates a new Curve25519 private key. This function uses …\nCreates a new <code>AssociatedData</code> instance from two public keys.\nCreates a <code>SessionKeys</code> object\nGenerates a new pre-key bundle, including one-time …\nOptional SHA-256 hash of the responder’s one-time …\nOne or more ephemeral one-time pre-keys, X25519 public …\nThe SHA-256 hash of the responder’s signed pre-key.\nThe private component of the signed pre-key, used for key …\nThe public component of the signed pre-key, shared with …\nThe identity public key of the responder.\nSets the <code>AssociatedData</code> for the current session.\nSets the <code>DecryptionKey</code> for the current session.\nSets the <code>EncryptionKey</code> for the current session.\nA signature of the <code>spk</code>, signed by the identity signing key.\nSigns a message using the current <code>SigningKey</code>.\nCalculates the size of the pre-key bundle.\nCalculates the size of the current <code>InitialMessage</code>.\nThe recipient’s signed public pre-key. For more …\nCalculates the base64 of the pre-key bundle.\nConverts the current <code>PrivateKey</code> into a base64-encoded …\nConverts the current <code>PublicKey</code> into a base64-encoded …\nConverts the current <code>InitialMessage</code> into a base64-encoded …\nConverts each element of the pre-key bundle into bytes.\nConverts the current <code>PrivateKey</code> into bytes.\nConverts the current <code>AssociatedData</code> into bytes.\nConverts the current <code>InitialMessage</code> into bytes.\nConverts a base64-encoded string into a <code>PreKeyBundle</code>.\nAttempts to create an <code>AssociatedData</code> instance from a byte …\nDerives a <code>Challenge</code> from a shared reference to a …\nDerives a <code>InitialMessage</code> from base64-encoded string.\nVerifies that a given <code>Signature</code> is valid for a message …\nThe recipient’s identity signing key (Ed25519), used to …\nGenerates a new Curve25519 pre-key bundle along with its …\nGenerates a new Curve25519 pre-key bundle along with its …\nHMAC-based Key Derivation Function (HKDF) used in the X3DH …\nProcesses the initial message sent by the initiator in the …\nProcesses a received pre-key bundle and performs the X3DH …\nProcesses the initial message sent by the initiator in the …")